
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * adPrefab.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function adPrefab(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _dragBg = this.game.add.sprite(0, 0, 'color', 'white.png', this);
	_dragBg.scale.setTo(2.38, 54.555);
	
	var _groupNine = this.game.add.group(this);
	
	this.game.add.sprite(0, 0, 'nine_1', null, _groupNine);
	
	this.game.add.sprite(0, 1061, 'nine_2', null, _groupNine);
	
	this.game.add.sprite(0, 2122, 'nine_3', null, _groupNine);
	
	this.game.add.sprite(0, 3183, 'nine_4', null, _groupNine);
	
	this.game.add.sprite(0, 4244, 'nine_5', null, _groupNine);
	
	this.game.add.sprite(0, 5305, 'nine_6', null, _groupNine);
	
	this.game.add.sprite(0, 6366, 'nine_7', null, _groupNine);
	
	this.game.add.sprite(0, 7427, 'nine_8', null, _groupNine);
	
	this.game.add.sprite(0, 8488, 'nine_9', null, _groupNine);
	
	var _groupAll = this.game.add.group(this);
	
	var _white_png = this.game.add.button(35, 937, 'color', this.clickGo, this, null, 'white.png', null, null, _groupAll);
	_white_png.scale.setTo(2.1, 0.5);
	_white_png.alpha = 0.0;
	
	
	
	// public fields
	
	this.fDragBg = _dragBg;
	this.fGroupNine = _groupNine;
	this.fGroupAll = _groupAll;
	
}

/** @type Phaser.Group */
var adPrefab_proto = Object.create(Phaser.Group.prototype);
adPrefab.prototype = adPrefab_proto;
adPrefab.prototype.constructor = adPrefab;

/* --- end generated code --- */
// -- user code here --

adPrefab.prototype.initOnce = function () {
	this.setDrag(this.fDragBg);
};


adPrefab.prototype.onDragStart = function (sprite, pointer) {
	// sprite.x = sprite.x;
	// sprite.y = pointer.y;

	gUserInfo.moveTime = Date.now();
	gUserInfo.moveBegainY = this.fDragBg.y;
};

adPrefab.prototype.clickBaidu = function () {
	window.location.href = "http://www.baidu.com";
};

var tHeight = 8488+1060-1206;
adPrefab.prototype.clickGo = function () {
	this.game.add.tween(this).to({x:-gGameConf.width - 1 },500, Phaser.Easing.Linear.None, true);
	this.game.add.tween(gGame.gameScene.fGroup1).to({x:0}, 500, Phaser.Easing.Linear.None, true);
	this.game.add.tween(gGame.gameScene.fColor_up).to({x:30}, 500, Phaser.Easing.Linear.None, true);
};

adPrefab.prototype.onDragStop = function () {
	if(this.fDragBg.y > 0){
		this.game.add.tween(this.fDragBg).to({y:0},500, Phaser.Easing.Exponential.Out, true);
		this.game.add.tween(this.fGroupAll).to({y:0},500, Phaser.Easing.Exponential.Out, true);
		this.game.add.tween(this.fGroupNine).to({y:0},500, Phaser.Easing.Exponential.Out, true);
		return;
	}

	if(this.fDragBg.y < -tHeight){
		this.game.add.tween(this.fDragBg).to({y:-tHeight},500, Phaser.Easing.Exponential.Out, true);
		this.game.add.tween(this.fGroupAll).to({y:-tHeight},500, Phaser.Easing.Exponential.Out, true);
		this.game.add.tween(this.fGroupNine).to({y:-tHeight},500, Phaser.Easing.Exponential.Out, true);
		return;
	}

	var span = this.fDragBg.y - gUserInfo.moveBegainY;
	var time = Date.now() - gUserInfo.moveTime;
	var dis = this.fDragBg.y + span*100/time;

	if(dis > 0){
		dis = 0;
	}

	if(dis < -tHeight){
		dis = -tHeight;
	}

	this.game.add.tween(this.fDragBg).to({y:dis},500, Phaser.Easing.Cubic.Out, true);
	this.game.add.tween(this.fGroupAll).to({y:dis},500, Phaser.Easing.Cubic.Out, true);
	this.game.add.tween(this.fGroupNine).to({y:dis},500, Phaser.Easing.Cubic.Out, true);
};

adPrefab.prototype.onDragUpdate = function () {
	if(this.fDragBg.y > 0){
		this.fGroupAll.y = this.fDragBg.y/6;
		this.fGroupNine.y = this.fDragBg.y/6;
	}else if(this.fDragBg.y < -tHeight){
		this.fGroupAll.y = this.fDragBg.y - (this.fDragBg.y + tHeight)/1.5;
		this.fGroupNine.y = this.fDragBg.y - (this.fDragBg.y + tHeight)/1.5;
	}else{
		this.fGroupAll.y = this.fDragBg.y;
		this.fGroupNine.y = this.fDragBg.y;
	}
};

adPrefab.prototype.setDrag = function (obj) {
	obj.inputEnabled = true;
	obj.input.enableDrag();
	obj.events.onDragStart.add(this.onDragStart, this);
	obj.events.onDragUpdate.add(this.onDragUpdate, this);
	obj.events.onDragStop.add(this.onDragStop, this);
	obj.input.allowHorizontalDrag = false;
};
