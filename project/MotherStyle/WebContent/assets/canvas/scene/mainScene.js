
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * mainScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function mainScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _groupColor = this.game.add.group(this);
	_groupColor.position.setTo(-55, -40);
	
	var _white_png = this.game.add.sprite(30, -10, 'color', 'white.png', _groupColor);
	_white_png.scale.setTo(2.5, 8.5);
	
	var _colorBottom = this.game.add.sprite(30, -17, 'color', 'fde500.png', _groupColor);
	_colorBottom.scale.setTo(2.5, 8.5);
	_colorBottom.alpha = 0.0;
	
	var _color_up = this.game.add.sprite(812, -19, 'color', '404040.png', _groupColor);
	_color_up.scale.setTo(2.5, 8.5);
	
	var _group1 = new prefab_1(this.game, this);
	_group1.position.setTo(751, 0);
	
	var _group2 = new prefab_2(this.game, this);
	_group2.position.setTo(751, 0);
	
	var _group3 = new prefab_3(this.game, this);
	_group3.position.setTo(751, 0);
	
	var _group4 = new prefab_4(this.game, this);
	_group4.position.setTo(751, 0);
	
	var _group5 = new prefab_5(this.game, this);
	_group5.position.setTo(751, 0);
	
	var _group6 = new prefab_6(this.game, this);
	_group6.position.setTo(751, 0);
	
	var _group7 = new prefab_7(this.game, this);
	_group7.position.setTo(751, 0);
	
	var _group8 = new prefab_8(this.game, this);
	_group8.position.setTo(751, 0);
	
	var _groupOver = new overPrefab(this.game, this);
	_groupOver.position.setTo(751, 0);
	
	var _bgBtn = this.game.add.button(0, 0, 'bg', null, this, null, null, null, null, this);
	_bgBtn.alpha = 0.0;
	
	var _music_btn = this.game.add.button(859, -23, 'music_btn', this.clickMusic, this, null, null, null, null, this);
	
	var _groupAD = new adPrefab(this.game, this);
	
	var _groupSetName = new pre_1(this.game, this);
	_groupSetName.position.setTo(-751, 0);
	
	
	
	// public fields
	
	this.fGroupColor = _groupColor;
	this.fColorBottom = _colorBottom;
	this.fColor_up = _color_up;
	this.fGroup1 = _group1;
	this.fGroup2 = _group2;
	this.fGroup3 = _group3;
	this.fGroup4 = _group4;
	this.fGroup5 = _group5;
	this.fGroup6 = _group6;
	this.fGroup7 = _group7;
	this.fGroup8 = _group8;
	this.fGroupOver = _groupOver;
	this.fBgBtn = _bgBtn;
	this.fMusic_btn = _music_btn;
	this.fGroupAD = _groupAD;
	this.fGroupSetName = _groupSetName;
	
}

/** @type Phaser.Group */
var mainScene_proto = Object.create(Phaser.Group.prototype);
mainScene.prototype = mainScene_proto;
mainScene.prototype.constructor = mainScene;

/* --- end generated code --- */
// -- user code here --

mainScene.prototype.appearGroup = function (group1, group2) {
	this.fBgBtn.inputEnabled = true;

	//3 f7973a
	//4 fde500
	//5 bad53f
	//6 4dbb84
	//7 00ae94
	//8 995ba3
	//9 ee465d

	this.game.add.tween(group1).to( { x:-gGameConf.width, y:0}, 1500,
		Phaser.Easing.Exponential.InOut, true);

	var tween = this.game.add.tween(group2).to( { x:0, y:0}, 1500,
		Phaser.Easing.Exponential.InOut, true);

	tween.onComplete.addOnce(function () {
		gGame.gameScene.fBgBtn.inputEnabled = false;
	})
};

mainScene.prototype.appearGroup2 = function (bObj, eObj) {
	//this.fBgBtn.inputEnabled = true;

	bObj.x = -gGameConf.width;

	var group = eObj;
	group.x = 0;
	group.setBackground();

	for(var i = 0; i < group.length; i++){
		this.setTempAction1(group.getChildAt(i));
	}

};

mainScene.prototype.disAppearGroup = function (group) {
	var tween = this.game.add.tween(group).to( { x:-gGameConf.width - 1, y:0}, 500,
		Phaser.Easing.Exponential.InOut, true);
};

mainScene.prototype.initOnce = function () {
	this.setAnchorMiddle(this.fMusic_btn);
	this.fBgBtn.inputEnabled = false;

	// this.game.input.onDown.add(this.onGameDown, "down");
	// this.game.input.onUp.add(this.onGameUp, "up");
	// this.game.input.addMoveCallback(this.onGameMove, "move");
	//移除事件
	// this.game.input.onDown.remove(this.onDown, "down");
	// this.game.input.onUp.remove(this.onUp, "up");
	// this.game.input.deleteMoveCallback(this.onMoveCallBack, "move");
};

mainScene.prototype.update = function () {
	this.fMusic_btn.angle += 2;
};

mainScene.prototype.clickMusic = function () {
	this.game.state.states.Video.on_off_Music();
	this.game.state.states.Video.on_off_Sound();
	//this.game.state.states.Video.playClick();
};

mainScene.prototype.setAnchorMiddle = function (spr) {
	spr.anchor.set(0.5,0.5);
	spr.x += spr.width/2;
	spr.y += spr.height/2;
};

mainScene.prototype.setColorChange = function (color) {
	if(this.fColor_up.alpha === 0){
		this.fColor_up.frameName = color + ".png";

		this.game.add.tween(this.fColor_up).to( { alpha:1}, 1000,
			Phaser.Easing.Linear.None, true);
		this.game.add.tween(this.fColorBottom).to( { alpha:0}, 1000,
			Phaser.Easing.Linear.None, true);
	}else{
		this.fColorBottom.frameName = color + ".png";

		this.game.add.tween(this.fColor_up).to( { alpha:0}, 1000,
			Phaser.Easing.Linear.None, true);
		this.game.add.tween(this.fColorBottom).to( { alpha:1}, 1000,
			Phaser.Easing.Linear.None, true);
	}
};

mainScene.prototype.setGroupTween = function (obj, width, time1, time2) {
	width = width || 50;
	time1 = 500 || 500;
	time2 = 1500 || 1500;

	var begainX = obj.x + width;
	var endX = obj.x;

	var tweenA = this.game.add.tween(obj).to({x:begainX}, time1, Phaser.Easing.Linear.None);
	var tweenB = this.game.add.tween(obj).to({x:endX}, time2, Phaser.Easing.Bounce.Out);
	tweenA.chain(tweenB);
	tweenA.start();
};

mainScene.prototype.setTempAction1 = function (group) {
	group.x += gGameConf.width;

	var time = Math.random()*200;
	var tweenA = this.game.add.tween(group).to({x:group.x - 350}, 100, Phaser.Easing.Linear.None, true);
	tweenA.onComplete.addOnce(function () {
		var tweenB = gGame.add.tween(group).to({x:group.x - 390}, 2600 + time, Phaser.Easing.Elastic.Out, true);
		tweenB.onComplete.addOnce(function () {
			//gGame.gameScene.fBgBtn.inputEnabled = false;
		})
	});
};

