
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * mainScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function mainScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0, 0, 'bg', 'mainbg.png', this);
	
	var _betPrefab = new bet(this.game, this);
	_betPrefab.position.setTo(2, 1086);
	
	var _betChoicePrefab = new betChoicePrefab(this.game, this);
	_betChoicePrefab.position.setTo(17, 645);
	
	var _playerPrefab = new player(this.game, this);
	_playerPrefab.position.setTo(9, 17);
	
	var _ballgroundPrefab = new ballgroundPrefab(this.game, this);
	_ballgroundPrefab.position.setTo(10, 112);
	
	var _menu_group = this.game.add.group(this);
	
	this.game.add.button(662, 7, 'btn', this.clickMenu, this, null, 'set.png', null, null, _menu_group);
	
	var _bonusText = this.game.add.text(299, 121, '+100000', {"font":"bold 36px Arial","fill":"#ff0000"}, _menu_group);
	_bonusText.scale.setTo(0.0, 1.0);
	
	var _gameNum = this.game.add.text(321, 22, '第 1 局', {"font":"bold 36px Arial","fill":"#ffffff"}, _menu_group);
	
	var _winText = this.game.add.text(351, 553, '', {"font":"bold 36px Arial","fill":"#ff0000"}, _menu_group);
	
	var _state = this.game.add.group(this);
	
	var _text_time = this.game.add.text(370, 261, '0', {"font":"bold 36px Arial","fill":"#ffffff","stroke":"#ffffff"}, _state);
	
	var _text_tip = this.game.add.text(354, 466, '', {"font":"bold 36px Arial","fill":"#ffff00","stroke":"#ffffff"}, _state);
	
	var _text_score = this.game.add.text(358, 353, '0', {"font":"bold 36px Arial","fill":"#ffffff","stroke":"#ffffff"}, _state);
	
	var _bonusLayer = new bonusLayer(this.game, this);
	
	
	
	// public fields
	
	this.fBetPrefab = _betPrefab;
	this.fBetChoicePrefab = _betChoicePrefab;
	this.fPlayerPrefab = _playerPrefab;
	this.fBallgroundPrefab = _ballgroundPrefab;
	this.fBonusText = _bonusText;
	this.fGameNum = _gameNum;
	this.fWinText = _winText;
	this.fText_time = _text_time;
	this.fText_tip = _text_tip;
	this.fText_score = _text_score;
	this.fBonusLayer = _bonusLayer;
	/* --- post-init-begin --- */
	// you can insert code here

	//create Text
	this.changeTint(true);
	this.updateGameNum();

	// setTimeout(function () {
	// 	gGame.gameScene && gGame.gameScene.fBetPrefab.setBtnClickScale();
	// }, 500);


	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var mainScene_proto = Object.create(Phaser.Group.prototype);
mainScene.prototype = mainScene_proto;
mainScene.prototype.constructor = mainScene;

/* --- end generated code --- */
// -- user code here --

//	资源问题
// 	重复投注两个按钮大小不一致。

mainScene.prototype.actionWinText = function (score) {
	this.fWinText.anchor.set(0.5,0);
	this.fWinText.text = "+" + score;

	//fly 135.68
	var vTween = this.game.add.tween(this.fWinText).to( { x:150, y:85}, 2000,
		Phaser.Easing.Exponential.Out, true);
	vTween.onComplete.add(tweenFunc,this);

	function tweenFunc(fSpr, fTween) {
		//fSpr.destroy();
		this.fWinText.text = "";
		this.fWinText.x = 351;
		this.fWinText.y = 553;
		vTween = null;

		gUserInfo.power += score;

		this.fPlayerPrefab.actionPowerTween();
	}
};

var m_tick = Date.now();
mainScene.prototype.addIconSprite = function (father, url) {
	if(father.children.length > 0){
		father.removeChildAt(0, father.children.length);
	}

	var sprite = new Phaser.Sprite(gGame, 0, 0, url);
	sprite.scale.x = father.width/sprite.width;
	sprite.scale.y = father.height/sprite.height;
	father.addChild(sprite);
};

mainScene.prototype.initMainScene = function () {

};

mainScene.prototype.initGlobalConf = function () {
	for(var i = 0; i < gUserInfo.betMine.length; i++){
		if(gUserInfo.betMine[i] > 0){
			gUserInfo.betLast = gUserInfo.betMine;
			break;
		}
	}
	gUserInfo.betMine = [0,0,0,0,0,0];
	gUserInfo.betTotal = [0,0,0,0,0,0];

	gRoomInfo.leftTeam =	{"nick":"摩幻","score":0};
	gRoomInfo.rightTeam =	{"nick":"龙珠","score":0};

	gUserInfo.betHistory = {};
	gRoomInfo.bonusResult = {};
};

mainScene.prototype.isBetting = function () {
	if(gRoomInfo.state !== gRoomConf.state.up.nick
		&& gRoomInfo.state !== gRoomConf.state.down.nick){
		return false;
	}

	if(gRoomInfo.remain >= gRoomConf.state.up.remain - 10000){
		return true;
	}

	if(gRoomInfo.remain >= gRoomConf.state.up.remain - 30000 &&
		gRoomInfo.remain < gRoomConf.state.up.remain - 20000){
		return true;
	}

	return false;
};

mainScene.prototype.changeTint = function (tinted) {
	// if(tinted){
	// 	for(var i = 1; i <= 6; i++){
	// 		this.fBetChoicePrefab.getGroup(i).getChildAt(0).tint = 0.22 * 0xffffff;
	// 		this.fBetChoicePrefab.getGroup(i).getChildAt(4).tint = 0.22 * 0xffffff;
	// 	}
	// }else{
	// 	for(var i = 1; i <= 6; i++){
	// 		this.fBetChoicePrefab.getGroup(i).getChildAt(0).tint =  0xffffff;
	// 		this.fBetChoicePrefab.getGroup(i).getChildAt(4).tint =  0xffffff;
	// 	}
	// }

	if(tinted){
		this.fBetChoicePrefab.getGroup(1).getChildAt(0).setFrames("hehe1.png", "hehe1.png","hehe1.png","hehe1.png");
		this.fBetChoicePrefab.getGroup(2).getChildAt(0).setFrames("hehe1.png", "hehe1.png","hehe1.png","hehe1.png");
		this.fBetChoicePrefab.getGroup(3).getChildAt(0).setFrames("hehe1.png", "hehe1.png","hehe1.png","hehe1.png");
		this.fBetChoicePrefab.getGroup(4).getChildAt(0).setFrames("hehe3.png", "hehe3.png","hehe3.png","hehe3.png");
		this.fBetChoicePrefab.getGroup(5).getChildAt(0).setFrames("hehe3.png", "hehe3.png","hehe3.png","hehe3.png");
		this.fBetChoicePrefab.getGroup(6).getChildAt(0).setFrames("hehe2.png", "hehe2.png","hehe2.png","hehe2.png");
	}else{
		this.fBetChoicePrefab.getGroup(1).getChildAt(0).setFrames("betChoice1.png", "betChoice1.png","betChoice1.png","betChoice1.png");
		this.fBetChoicePrefab.getGroup(2).getChildAt(0).setFrames("betChoice1.png", "betChoice1.png","betChoice1.png","betChoice1.png");
		this.fBetChoicePrefab.getGroup(3).getChildAt(0).setFrames("betChoice1.png", "betChoice1.png","betChoice1.png","betChoice1.png");
		this.fBetChoicePrefab.getGroup(4).getChildAt(0).setFrames("betChoice3.png", "betChoice3.png","betChoice3.png","betChoice3.png");
		this.fBetChoicePrefab.getGroup(5).getChildAt(0).setFrames("betChoice3.png", "betChoice3.png","betChoice3.png","betChoice3.png");
		this.fBetChoicePrefab.getGroup(6).getChildAt(0).setFrames("betChoice2.png", "betChoice2.png","betChoice2.png","betChoice2.png");
	}
};

mainScene.prototype.checkTeamWin = function () {
	if(gRoomInfo.leftTeam.score === gRoomInfo.rightTeam.score){
		this.setTips("平局！");
	}else if(gRoomInfo.leftTeam.score > gRoomInfo.rightTeam.score){
		this.setTips(gRoomInfo.leftTeam.nick + " 胜");
	}else{
		this.setTips(gRoomInfo.rightTeam.nick + " 胜");
	}
};

mainScene.prototype.checkStateIsHalf = function () {
	if(gRoomInfo.state !== gRoomConf.state.half1.nick
		&& gRoomInfo.state !== gRoomConf.state.half2.nick
		&& gRoomInfo.state !== gRoomConf.state.half3.nick
		&& gRoomInfo.state !== gRoomConf.state.half4.nick
		&& gRoomInfo.state !== gRoomConf.state.half5.nick
		&& gRoomInfo.state !== gRoomConf.state.half6.nick
		&& gRoomInfo.state !== gRoomConf.state.half7.nick
		&& gRoomInfo.state !== gRoomConf.state.half8.nick){
		return false;
	}

	return true;
};

// mainScene.prototype.checkPlayerWin = function () {
// 	this.fBonusLayer.appearLayer();
// 	this.fBonusLayer.checkPlayerWin();
// };

mainScene.prototype.clickDownEvent = function (btn) {
	btn.scale.set(0.8);
};

mainScene.prototype.clickUpEvent = function (btn) {
	btn.scale.set(1);
};

mainScene.prototype.clickMenu = function (btn) {
	this.setTips("点击菜单");
};

mainScene.prototype.clickShop = function (btn) {
	this.setTips("点击商店");
};

mainScene.prototype.preload = function () {
	this.game.state.states.Net.make2002();
	this.fBetChoicePrefab.setBonusBeiShu();
};

mainScene.prototype.randomTeamScore = function () {
	if(!this.checkStateIsHalf()){
		return;
	}

	if(Math.random()> 0.005 ){
		return;
	}

	if(Math.random() > 0.5){
		gRoomInfo.leftTeam.score++;
		this.setTips(gRoomInfo.leftTeam.nick + "队，获得 1 分！")
	}else {
		gRoomInfo.rightTeam.score++;
		this.setTips( gRoomInfo.rightTeam.nick + "队，获得 1 分！")
	}
};

mainScene.prototype.randomBonus = function () {
	var arr = [];
	for(var i = 0; i < 6; i++){
		arr.push((Math.random() * 10).toFixed(2));
	}
	return arr;
};

mainScene.prototype.setTips = function (str) {
	this.fText_tip.anchor.set(0.5, 0.5);

	this.fText_tip.text = str;

	var spr = this.fText_tip;
	this.fText_tip.scale.set(0,0);
	var vTween = this.game.add.tween(spr.scale).to( { x:1.2, y:1.2}, 1000, Phaser.Easing.Exponential.Out, true);
	vTween.onComplete.add(tweenFunc,this);

	function tweenFunc(fSpr, fTween) {
		//fSpr.destroy();
		spr.scale.set(0,0);
		fTween = null;
	}
};

mainScene.prototype.setPowerChange = function (count) {
	this.fBonusText.anchor.set(0.5, 0.5);

	var str = count > 0 ? "+" + count:count;
	this.fBonusText.text = str;

	var spr = this.fBonusText;
	this.fBonusText.scale.set(0,0);
	var vTween = this.game.add.tween(spr.scale).to( { x:1.2, y:1.2}, 1000, Phaser.Easing.Exponential.Out, true);
	vTween.onComplete.add(tweenFunc,this);

	function tweenFunc(fSpr, fTween) {
		//fSpr.destroy();
		spr.scale.set(0,0);
		fTween = null;
	}
};

mainScene.prototype.update = function () {
	var nowTick = Date.now();
	var span = nowTick - m_tick;
	m_tick = nowTick;

	gRoomInfo.remain -= span*5;

	this.randomTeamScore();

	this.updateStateText();
	this.fBallgroundPrefab.update();

	this.fPlayerPrefab.updateMess();

	this.fBetPrefab.update();
};

mainScene.prototype.updateStateText = function () {
	this.fText_time.anchor.set(0.5, 0);

	if(!this.checkStateIsHalf()){
		var time = Math.floor(gRoomInfo.remain/1000);
		time = time < 0 ? 0:time;
		var str = gRoomConf.state[gRoomInfo.state].descript + "   倒计时: " + time + " 秒";
		this.fText_time.text = str;
	}else{
		this.fText_time.text = "";
	}
};

mainScene.prototype.updateScore = function () {
	var left = gRoomInfo.leftTeam.nick + "   " + gRoomInfo.leftTeam.score + "分";
	var right = gRoomInfo.rightTeam.score + "分" + "   " + gRoomInfo.rightTeam.nick ;

	this.fText_score.anchor.set(0.5, 0);
	this.fText_score.text = left + "   —   " + right;
};

mainScene.prototype.updateGameNum = function () {
	this.fGameNum.text ="第 " +  gRoomInfo.gameNum + " 局";
};

mainScene.prototype.updateGameState = function () {
	this.updateGameNum();

	if(gRoomInfo.state === gRoomConf.state.idle.nick){
		this.updateStateIdle();
	}else if(gRoomInfo.state === gRoomConf.state.rest.nick){
		this.updateStateReset();
	}else if(gRoomInfo.state === gRoomConf.state.result.nick){
		this.updateStateResult();
	}else if(gRoomInfo.state === gRoomConf.state.bonus.nick){
		this.updateStateBonus();
	}else{
		this.updateStateHalf();
	}
};

mainScene.prototype.updateStateIdle = function () {
	this.fBetChoicePrefab.disAppearWin();
	this.initGlobalConf();
	this.fBetChoicePrefab.initBetChoice();
	gRoomInfo.gameNum++;
	this.updateGameNum();
};

mainScene.prototype.updateStateHalf = function () {
	if(gRoomInfo.state === gRoomConf.state.half1.nick
		|| gRoomInfo.state === gRoomConf.state.half3.nick
		|| gRoomInfo.state === gRoomConf.state.half5.nick
		|| gRoomInfo.state === gRoomConf.state.half7.nick){

		this.changeTint(false);

		return;
	}


	if(gRoomInfo.state === gRoomConf.state.half2.nick
		|| gRoomInfo.state === gRoomConf.state.half4.nick
		|| gRoomInfo.state === gRoomConf.state.half6.nick
		|| gRoomInfo.state === gRoomConf.state.half8.nick){

		this.changeTint(true);
	}
};

mainScene.prototype.updateStateReset = function () {

};

mainScene.prototype.updateStateResult = function () {
	this.checkTeamWin();

};

mainScene.prototype.updateStateBonus = function () {
	this.fBonusLayer.checkPlayerWin();
};

mainScene.prototype.playerBet = function (who, count, uid) {

};



