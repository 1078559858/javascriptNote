
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * bonusLayer.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function bonusLayer(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _bgBtn = this.game.add.button(0, 0, 'bg', null, this, null, 'blackShade.png', null, null, this);
	_bgBtn.scale.setTo(0.565, 1.65);
	
	this.game.add.text(280, 158, '结算界面', {"font":"bold 36px Arial","fill":"#ffffff"}, this);
	
	this.game.add.text(81, 407, '昵称', {"font":"bold 22px Arial","fill":"#ffffff"}, this);
	
	this.game.add.text(346, 407, '投注', {"font":"bold 22px Arial","fill":"#ffffff"}, this);
	
	this.game.add.text(619, 407, '返奖', {"font":"bold 22px Arial","fill":"#ffffff"}, this);
	
	var _textNick = this.game.add.text(64, 495, 'testNick', {"font":"bold 22px Arial","fill":"#ffff00"}, this);
	
	var _textBet = this.game.add.text(367, 496, '0', {"font":"bold 22px Arial","fill":"#ffff00"}, this);
	
	var _textBonus = this.game.add.text(641, 498, '0', {"font":"bold 22px Arial","fill":"#ffff00"}, this);
	
	
	
	// public fields
	
	this.fBgBtn = _bgBtn;
	this.fTextNick = _textNick;
	this.fTextBet = _textBet;
	this.fTextBonus = _textBonus;
	/* --- post-init-begin --- */
	// you can insert code here

	//create Text
	this.closeLayer();
	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var bonusLayer_proto = Object.create(Phaser.Group.prototype);
bonusLayer.prototype = bonusLayer_proto;
bonusLayer.prototype.constructor = bonusLayer;

/* --- end generated code --- */
// -- user code here --


bonusLayer.prototype.appearLayer = function () {
	this.scale.x = 1;
	this.fBgBtn.scale.x = 1;
};

bonusLayer.prototype.checkPlayerWin = function () {
	// this.checkOneWin();
	// this.checkTwoWin();
	// this.checkThreeWin();
	// this.checkFourWin();
	// this.checkFiveWin();
	// this.checkSixWin();

	for(var key in gRoomInfo.bonusResult){
		if(gRoomInfo.bonusResult[key]){
			gGame.gameScene.fBetChoicePrefab.setWin(Number(key) + 1);
		}
	}

	var score = 0;

	var tempArr = gUserInfo.betHistory[gUserInfo.uid] || [];

	for(var i = 0; i < tempArr.length; i++){
		if(gRoomInfo.bonusResult[tempArr[i].who]){
			score += Math.round(tempArr[i].price * tempArr[i].count);
		}
	}

	this.fTextBonus.text = score;

	gGame.gameScene.actionWinText(score);

	gGame.gameScene.fPlayerPrefab.updateMess();
	gGame.gameScene.setPowerChange(score);
};

bonusLayer.prototype.closeLayer = function () {
	this.scale.x = 0;
	this.fBgBtn.scale.x = 0;

	this.fTextNick.text = gUserInfo.nick;
	this.fTextBet.text = 100000;
	this.fTextBonus.text = 100;

	// this.fTextNick.anchor.set(0.5,0);
	this.fTextBet.anchor.set(0.5,0);
	this.fTextBonus.anchor.set(0.5,0);
};

bonusLayer.prototype.checkOneWin = function () {
	if(gRoomInfo.leftTeam.score <= gRoomInfo.rightTeam.score){
		return 0;
	}

	gGame.gameScene.fBetChoicePrefab.setWin(1);
};

bonusLayer.prototype.checkTwoWin = function () {
	if(gRoomInfo.leftTeam.score !== gRoomInfo.rightTeam.score){
		return 0;
	}

	gGame.gameScene.fBetChoicePrefab.setWin(2);
};

bonusLayer.prototype.checkThreeWin = function () {
	if(gRoomInfo.leftTeam.score >= gRoomInfo.rightTeam.score){
		return 0;
	}

	gGame.gameScene.fBetChoicePrefab.setWin(3);
};

bonusLayer.prototype.checkFourWin = function () {
	if(gRoomInfo.leftTeam.score === gRoomInfo.rightTeam.score &&
		gRoomInfo.leftTeam.score === 0){
		return 0;
	}

	var max = gRoomInfo.leftTeam.score + gRoomInfo.rightTeam.score;

	if(max % 2 === 1){
		gGame.gameScene.fBetChoicePrefab.setWin(4);
	}
};

bonusLayer.prototype.checkFiveWin = function () {
	if(gRoomInfo.leftTeam.score === gRoomInfo.rightTeam.score &&
		gRoomInfo.leftTeam.score === 0){
		return 0;
	}

	var max = gRoomInfo.leftTeam.score + gRoomInfo.rightTeam.score;

	if(max % 2 === 0){
		gGame.gameScene.fBetChoicePrefab.setWin(5);
	}
};

bonusLayer.prototype.checkSixWin = function () {
	var sub = Math.abs(gRoomInfo.leftTeam.score - gRoomInfo.rightTeam.score);

	if(sub >= 2){
		gGame.gameScene.fBetChoicePrefab.setWin(6);
	}
};
