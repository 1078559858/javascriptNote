
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * mainScene.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function mainScene(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	this.game.add.sprite(0, 0, 'bg', 'mainbg.png', this);
	
	var _betPrefab = new bet(this.game, this);
	_betPrefab.position.setTo(0, 1083);
	
	var _betChoicePrefab = new betChoicePrefab(this.game, this);
	_betChoicePrefab.position.setTo(2, 615);
	
	var _playerPrefab = new player(this.game, this);
	_playerPrefab.position.setTo(9, 17);
	
	var _ballgroundPrefab = new ballgroundPrefab(this.game, this);
	_ballgroundPrefab.position.setTo(10, 112);
	
	var _winText = this.game.add.text(351, 553, '', {"font":"bold 36px Arial","fill":"#ff0000"}, this);
	
	var _gameNum = this.game.add.text(322, 5, '第 1 局', {"font":"bold 36px Arial","fill":"#ffffff"}, this);
	
	var _bonusLayer = new bonusLayer(this.game, this);
	
	var _allFootballers = new allFootBallers(this.game, this);
	_allFootballers.position.setTo(10, 110);
	
	var _menuLayer = new menuPrefabLayer(this.game, this);
	_menuLayer.position.setTo(5, -2);
	
	var _disConnectLayer = new disConnectLayer(this.game, this);
	_disConnectLayer.position.setTo(0, -15);
	
	
	
	// public fields
	
	this.fBetPrefab = _betPrefab;
	this.fBetChoicePrefab = _betChoicePrefab;
	this.fPlayerPrefab = _playerPrefab;
	this.fBallgroundPrefab = _ballgroundPrefab;
	this.fWinText = _winText;
	this.fGameNum = _gameNum;
	this.fBonusLayer = _bonusLayer;
	this.fAllFootballers = _allFootballers;
	this.fMenuLayer = _menuLayer;
	this.fDisConnectLayer = _disConnectLayer;
	/* --- post-init-begin --- */
	// you can insert code here

	//create Text

	this.updateGameNum();
	// setTimeout(function () {
	// 	gGame.gameScene && gGame.gameScene.fBetPrefab.setBtnClickScale();
	// }, 500);

	/* --- post-init-end --- */
	
	
}

/** @type Phaser.Group */
var mainScene_proto = Object.create(Phaser.Group.prototype);
mainScene.prototype = mainScene_proto;
mainScene.prototype.constructor = mainScene;

/* --- end generated code --- */
// -- user code here --

//	资源问题
// 	重复投注两个按钮大小不一致。

mainScene.prototype.actionWinText = function (score) {
	this.fWinText.anchor.set(0.5,0);
	this.fWinText.text = "+" + score;

	//fly 135.68
	var vTween = this.game.add.tween(this.fWinText).to( { x:150, y:85}, 2000,
		Phaser.Easing.Exponential.Out, true);
	vTween.onComplete.add(tweenFunc,this);

	function tweenFunc(fSpr, fTween) {
		//fSpr.destroy();
		this.fWinText.text = "";
		this.fWinText.x = 351;
		this.fWinText.y = 553;
		vTween = null;
		this.fPlayerPrefab.actionPowerTween();
	}
};

var m_tick = Date.now();
mainScene.prototype.addIconSprite = function (father, url) {
	if(father.children.length > 0){
		father.removeChildAt(0, father.children.length);
	}

	var sprite = new Phaser.Sprite(gGame, 0, 0, url);
	sprite.scale.x = father.width/sprite.width;
	sprite.scale.y = father.height/sprite.height;
	father.addChild(sprite);
};

mainScene.prototype.initGlobalConf = function () {
	for(var i = 0; i < gUserInfo.betMine.length; i++){
		if(gUserInfo.betMine[i] > 0){
			gUserInfo.betLast = gUserInfo.betMine;
			break;
		}
	}
	gUserInfo.betMine = [0,0,0,0,0,0];
	gUserInfo.betTotal = [0,0,0,0,0,0];
	gRoomInfo.betPrice = [0,0,0,0,0,0];
	gUserInfo.betHistory = [];

	gRoomInfo.leftTeam =	{"nick":"","score":0, "members":[]};
	gRoomInfo.rightTeam =	{"nick":"","score":0, "members":[]};
	gRoomInfo.membersRace = {};
	gRoomInfo.bonusResult = {};
};

mainScene.prototype.isBetting = function () {
	if(gRoomInfo.state !== gRoomConf.state.up.nick
		&& gRoomInfo.state !== gRoomConf.state.down.nick){
		return false;
	}

	if(gRoomInfo.remain >= gRoomConf.state.up.remain - 10000){
		return true;
	}

	if(gRoomInfo.remain >= gRoomConf.state.up.remain - 30000 &&
		gRoomInfo.remain < gRoomConf.state.up.remain - 20000){
		return true;
	}

	return false;
};

mainScene.prototype.checkStateIsHalf = function () {
	if(gRoomInfo.state !== gRoomConf.state.half1.nick
		&& gRoomInfo.state !== gRoomConf.state.half2.nick
		&& gRoomInfo.state !== gRoomConf.state.half3.nick
		&& gRoomInfo.state !== gRoomConf.state.half4.nick
		&& gRoomInfo.state !== gRoomConf.state.half5.nick
		&& gRoomInfo.state !== gRoomConf.state.half6.nick
		&& gRoomInfo.state !== gRoomConf.state.half7.nick
		&& gRoomInfo.state !== gRoomConf.state.half8.nick){
		return false;
	}

	return true;
};

// mainScene.prototype.checkPlayerWin = function () {
// 	this.fBonusLayer.appearLayer();
// 	this.fBonusLayer.checkPlayerWin();
// };

mainScene.prototype.clickDownEvent = function (btn) {
	btn.scale.set(0.8);
};

mainScene.prototype.clickUpEvent = function (btn) {
	btn.scale.set(1);
};

mainScene.prototype.createInit = function () {
	this.game.state.states.Net.make2002();
	this.fBetChoicePrefab.createInit();
};

mainScene.prototype.setAnchorMiddle = function (spr) {
	spr.anchor.set(0.5,0.5);
	spr.x += spr.width/2;
	spr.y += spr.height/2;
};

mainScene.prototype.setAnchorRight = function (spr) {
	spr.anchor.set(1,0.5);
	spr.x += spr.width;
	spr.y += spr.height/2;
};

mainScene.prototype.setAnchorLeft = function (spr) {
	spr.anchor.set(0,0.5);
	spr.y += spr.height/2;
};

mainScene.prototype.update = function () {
	var nowTick = Date.now();
	var span = nowTick - m_tick;
	m_tick = nowTick;

	gRoomInfo.remain -= span;
	if(this.checkStateIsHalf()){
		gRoomInfo.duration += span;
	}

	this.fBallgroundPrefab.update();
	this.fBetPrefab.update();
};

mainScene.prototype.updateGameNum = function () {
	this.fGameNum.text ="第 " +  gRoomInfo.gameNum + " 局";
};

mainScene.prototype.updateGameState = function () {
	this.updateGameNum();

	if(gRoomInfo.state === gRoomConf.state.idle.nick){
		this.updateStateIdle();
	}else if(gRoomInfo.state === gRoomConf.state.rest.nick){
		this.updateStateReset();
	}else if(gRoomInfo.state === gRoomConf.state.result.nick){
		this.updateStateResult();
	}else if(gRoomInfo.state === gRoomConf.state.bonus.nick){
		this.updateStateBonus();
	}else{
		this.updateStateHalf();
	}
};

mainScene.prototype.updateStateIdle = function () {
	this.fBetChoicePrefab.disAppearWin();
	this.initGlobalConf();
	this.fBetChoicePrefab.createInit();
	gRoomInfo.gameNum++;
	this.updateGameNum();
	this.fBetChoicePrefab.changeGray(true);
};

mainScene.prototype.updateStateHalf = function () {
	if(gRoomInfo.state === gRoomConf.state.half1.nick
		|| gRoomInfo.state === gRoomConf.state.half3.nick
		|| gRoomInfo.state === gRoomConf.state.half5.nick
		|| gRoomInfo.state === gRoomConf.state.half7.nick){

		this.fBetChoicePrefab.changeGray(false);

		return;
	}

	if(gRoomInfo.state === gRoomConf.state.half2.nick
		|| gRoomInfo.state === gRoomConf.state.half4.nick
		|| gRoomInfo.state === gRoomConf.state.half6.nick
		|| gRoomInfo.state === gRoomConf.state.half8.nick){

		this.fBetChoicePrefab.changeGray(true);
	}
};

mainScene.prototype.updateStateReset = function () {
	this.fBetChoicePrefab.changeGray(true);
};

mainScene.prototype.updateStateResult = function () {
	this.fBetChoicePrefab.changeGray(true);
};

mainScene.prototype.updateStateBonus = function () {
	this.fBetChoicePrefab.changeGray(true);
	this.fBonusLayer.checkPlayerWin();

	var history = {};
	history.leftNick = gRoomInfo.leftTeam.nick;
	history.rightNick = gRoomInfo.rightTeam.nick;
	history.bet = gUserInfo.betHistory;
	history.leftScore = gRoomInfo.leftTeam.score;
	history.rightScore = gRoomInfo.rightTeam.score;
	history.result = gRoomInfo.bonusResult;

	if(history.bet.length > 0){
		gRoomInfo.tenBetHistory.unshift(history);

		if(gRoomInfo.tenBetHistory.length > 10){
			gRoomInfo.tenBetHistory.shift();
		}
	}

	gUserInfo.betHistory = [];
};



