
// -- user code here --

/* --- start generated code --- */

// Generated by  1.4.4 (Phaser v2.6.2)


/**
 * allFootBallers.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function allFootBallers(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _ball = this.game.add.sprite(365, 240, 'player', 'ball.png', this);
	
	var _lsmy = this.game.add.sprite(30, 240, 'player', 'red3.png', this);
	
	var _rsmy = this.game.add.sprite(700, 240, 'player', 'blue3.png', this);
	
	var _lzqf = this.game.add.sprite(360, 230, 'player', 'red1.png', this);
	
	var _lyqf = this.game.add.sprite(360, 250, 'player', 'red2.png', this);
	
	var _lzbzc = this.game.add.sprite(571, 392, 'player', 'red2.png', this);
	
	var _lzzc = this.game.add.sprite(571, 412, 'player', 'red2.png', this);
	
	var _lyzc = this.game.add.sprite(571, 392, 'player', 'red2.png', this);
	
	var _lybzc = this.game.add.sprite(571, 412, 'player', 'red2.png', this);
	
	var _lzbhw = this.game.add.sprite(782, 554, 'player', 'red2.png', this);
	
	var _lzhw = this.game.add.sprite(782, 574, 'player', 'red2.png', this);
	
	var _lyhw = this.game.add.sprite(571, 392, 'player', 'red2.png', this);
	
	var _lybhw = this.game.add.sprite(571, 412, 'player', 'red2.png', this);
	
	var _rzqf = this.game.add.sprite(571, 392, 'player', 'blue2.png', this);
	
	var _ryqf = this.game.add.sprite(571, 412, 'player', 'blue2.png', this);
	
	var _rzbzc = this.game.add.sprite(782, 554, 'player', 'blue2.png', this);
	
	var _rzzc = this.game.add.sprite(782, 574, 'player', 'blue2.png', this);
	
	var _ryzc = this.game.add.sprite(782, 554, 'player', 'blue2.png', this);
	
	var _rybzc = this.game.add.sprite(782, 574, 'player', 'blue2.png', this);
	
	var _rzbhw = this.game.add.sprite(993, 716, 'player', 'blue2.png', this);
	
	var _rzhw = this.game.add.sprite(993, 736, 'player', 'blue2.png', this);
	
	var _ryhw = this.game.add.sprite(782, 554, 'player', 'blue2.png', this);
	
	var _rybhw = this.game.add.sprite(782, 574, 'player', 'blue2.png', this);
	
	
	
	// public fields
	
	this.fBall = _ball;
	this.fLsmy = _lsmy;
	this.fRsmy = _rsmy;
	this.fLzqf = _lzqf;
	this.fLyqf = _lyqf;
	this.fLzbzc = _lzbzc;
	this.fLzzc = _lzzc;
	this.fLyzc = _lyzc;
	this.fLybzc = _lybzc;
	this.fLzbhw = _lzbhw;
	this.fLzhw = _lzhw;
	this.fLyhw = _lyhw;
	this.fLybhw = _lybhw;
	this.fRzqf = _rzqf;
	this.fRyqf = _ryqf;
	this.fRzbzc = _rzbzc;
	this.fRzzc = _rzzc;
	this.fRyzc = _ryzc;
	this.fRybzc = _rybzc;
	this.fRzbhw = _rzbhw;
	this.fRzhw = _rzhw;
	this.fRyhw = _ryhw;
	this.fRybhw = _rybhw;
	
}

/** @type Phaser.Group */
var allFootBallers_proto = Object.create(Phaser.Group.prototype);
allFootBallers.prototype = allFootBallers_proto;
allFootBallers.prototype.constructor = allFootBallers;

/* --- end generated code --- */
// -- user code here --

allFootBallers.fbInfo = {};
allFootBallers.prototype.initOnce = function () {
	for(var i = 0; i < this.children.length; i++){
		var spr = this.getChildAt(i);
		spr.anchor.set(0.5,0.5);

		var style = {fontSize:20, fill:"#ffffff"};
		var text = this.game.make.text(0, 0, i, style);
		text.anchor.set(0.5,0.5);
		spr.addChild(text);

		//spr.scale.set(0.66);
	}

	//this.drawRect();
};

allFootBallers.prototype.initAllFootballers = function (lMembers,rMembers, allMembersInfo) {
	allFootBallers.fbInfo = {};

	for(var key in allMembersInfo){
		var footballer;
		if(FormatNumber.checkArrHasNumber(lMembers, key)){
			footballer = this.getLeftFootballer(allMembersInfo[key].pos);
		}

		if(FormatNumber.checkArrHasNumber(rMembers, key)){
			footballer = this.getRightFootballer(allMembersInfo[key].pos);
		}

		if(!footballer){
			continue;
		}

		allFootBallers.fbInfo[key] = footballer;

		footballer.getChildAt(0).text = allMembersInfo[key].mark;
		this.setFootballerPosByID(key, allMembersInfo[key].x, allMembersInfo[key].y);
	}
};

allFootBallers.prototype.getLeftFootballer = function (name) {
	switch (name){
		case "smy": return this.fLsmy;
		case "zqf": return this.fLzqf;
		case "yqf": return this.fLyqf;
		case "zbzc": return this.fLzbzc;
		case "zzc": return this.fLzzc;
		case "yzc": return this.fLyzc;
		case "ybzc": return this.fLybzc;
		case "zbhw": return this.fLzbhw;
		case "zhw": return this.fLzhw;
		case "yhw": return this.fLyhw;
		case "ybhw": return this.fLybhw;
		default:
			console.log("left footballer name = ", name, "is not found!");
			break;
	}

	return null;
};

allFootBallers.prototype.getRightFootballer = function (name) {
	switch (name){
		case "smy": return this.fRsmy;
		case "zqf": return this.fRzqf;
		case "yqf": return this.fRyqf;
		case "zbzc": return this.fRzbzc;
		case "zzc": return this.fRzzc;
		case "yzc": return this.fRyzc;
		case "ybzc": return this.fRybzc;
		case "zbhw": return this.fRzbhw;
		case "zhw": return this.fRzhw;
		case "yhw": return this.fRyhw;
		case "ybhw": return this.fRybhw;
		default:
			console.log("right footballer name = ", name, "is not found!");
			break;
	}

	return null;
};

allFootBallers.prototype.getFootballerByID = function (id) {
	if(!allFootBallers.fbInfo[id]){
		console.log("get footballer id is not found! id = ", id);
	}

	return allFootBallers.fbInfo[id];
};

allFootBallers.prototype.setFootballerPosByID = function (id, x, y) {
	var fb = this.getFootballerByID(id);
	fb.x = x;
	fb.y = 480 - y;
};

allFootBallers.prototype.drawRect = function (x, y, height, width) {
	var gLeftAttackRange = {
		//smy: {x: 30, y: 185, w: 30, h: 115},
		 //zqf: {x: 500, y: 210, w: 200, h: 155},
		 //yqf: {x: 500, y: 210, w: 200, h: 155},
		 //zbzc: {x: 370, y: 345, w: 330, h: 155},
		 //zzc: {x: 370, y: 210, w: 200, h: 155},
		 //yzc: {x: 370, y: 210, w: 200, h: 155},
		 //ybzc: {x: 370, y: 70, w: 330, h: 155},
		 //zbhw: {x: 200, y: 345, w: 200, h: 155},
		 //zhw: {x: 200, y: 210, w: 200, h: 155},
		 //yhw: {x: 200, y: 210, w: 200, h: 155},
		 //ybhw: {x: 200, y: 70, w: 200, h: 155},


	};

	for(var key in gLeftAttackRange){
		var x = gLeftAttackRange[key].x + 10;
		var y = gLeftAttackRange[key].y;
		var w = gLeftAttackRange[key].w;
		var h = gLeftAttackRange[key].h;

		var graphics = this.game.add.graphics(0, 0);
		graphics.beginFill("#FFFFFF"); //必须要填充一个颜色
		graphics.drawRect(x, 480- y, w, h);
	}


};

allFootBallers.prototype.actionBall = function (targetX, targetY, time) {
	
};
